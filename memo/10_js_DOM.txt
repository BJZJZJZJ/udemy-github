1. window & document
    1) window 
      - 브라우저가 지원하는 전역 object
      - 브라우저 윈도우와 관련된 유틸리티 & function 이 준비 됨 
        * 브라우저 탭을 의미

      - window 안의 모든 속성과 메서드 실제 브라우저에서 전역변수/함수로 사용되어 
         window. 없이도 접근 가능 
         * window 객체만을 위한 예외사항

    2) document
      - window 의 하위 객체
      - 저장된 웹사이트 콘텐츠와 관련된 함수와 정보를 포함 
      - 브라우저에 의해 분석되어 렌더링 된 HTML 코드를 분석하기 위해서 사용되는 객체


2. DOM (document Object Model)
    - 웹개발 관점에서, HTML 코드를 해석한 다음 데이터와 브라우저의 내부를 표현하는 것을 설명해주는 역할
    - 위의 과정을 거쳐 자바스크립트 코드로 DOM과 상호작용 가능.

    - 쉽게 말해서 HTML 코드를 JS 객체로 변환한 것이라고 생각하면 된다.
    - 이를 통해 JS를 이용해 상호작용


***** console.dir(element) 를 이용해 메소드와 변수 확인 가능


3. defer 속성
    - script 태그의 속성으로 브라우저에 의해 HTML 문서가 분석 될 때, 
        모든 문서가 분석이 완료될때까지 script를 지연시키는 속성 


4. DOM 트리 & DOM 탐색
    - DOM은 HTML 코드를 자바스크립트와 상호작용 하기 위해 parsing 된 형태이기 때문에
        HTML의 각 Element는 Tree 형태로 표현할 수 있음.
        이를 DOM Tree라고 함

    - DOM 접근 방법
      1) Drill Into Elements
        document.body.children[0].firstChild 와 같은 방법
          * DOM Tree를 확실하게 파악하고 있어야 함

      2) Query Elements
        document.getElementById('id');
        document.querySelector('.some-class');  // CSS 선택자를 사용하는 메소드.
              // 첫번째 Element가 반환됨
        document.querySelectorAll('.some-class');  // 배열로써 선택자가 동일한 element 반환

        document.getElementsByClassName('some-css-class')
        document.getElementsByTagName('tag')



5. 새로운 element 작성
    1) Element 생성 
      let a = document.createElement('a');  // a 위치는 태그 이름
    2) 부모 Element에 접근
      let p = document.querySelector('p');
    3) 부모와 연결
      p.append(a);       // p.insert() 도 가능


6. 기존 element 삭제 
    1) element 선택
    2) remove() 메소드 호출 // IE 에서는 작동하지 않아서 2-1) 쓰기도 한다네요
    2-1) 부모element로부터 removeChild() 메소드 호출


7. 기존 element 옮기기
    1) 옮기고자 하는 element로부터 append / insert 호출



8. Element 에 class 추가하기
    1) element.className = "1stClass 2ndClass ...";
        => 기존에 등록되어있는 class를 덮어씌우고 없는 경우 추가하기

    2) element.classList.add('className');
        => 이 방법 권장
